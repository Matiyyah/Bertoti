texto 1 : What precisely do we mean by software engineering? What distinguishes “software
engineering” from “programming” or “computer science”? And why would Google have a
unique perspective to add to the corpus of previous software engineering literature written
over the past 50 years? The terms “programming” and “software engineering” have been
used interchangeably for quite some time in our industry, although each term has a different
emphasis and different implications. University students tend to study computer science and
get jobs writing code as “programmers.” “Software engineering,” however, sounds more
serious, as if it implies the application of some theoretical knowledge to build something real
and precise. Mechanical engineers, civil engineers, aeronautical engineers, and those in
other engineering disciplines all practice engineering. They all work in the real world and use
the application of their theoretical knowledge to create something real. Software engineers
also create “something real,” though it is less tangible than the things other engineers create.
Unlike those more established engineering professions, current software engineering theory
or practice is not nearly as rigorous. Aeronautical engineers must follow rigid guidelines and
practices, because errors in their calculations can cause real damage; programming, on the
whole, has traditionally not followed such rigorous practices. But, as software becomes more
integrated into our lives, we must adopt and rely on more rigorous engineering methods. We
hope this book helps others see a path toward more reliable software practices.

entendimento : ele compara a engenharia de software com outras materias de engenharia, falando que nos dirigimos de forma errada a materia, sendo que em engenharia deve seguir metodos rigosos ja que um erro pode transformar em danos irreversíveis.
ao contrario da programação

testo 2: Programming Over Time We propose that “software engineering” encompasses not just the
act of writing code, but all of the tools and processes an organization uses to build and
maintain that code over time. What practices can a software organization introduce that will
best keep its code valuable over the long term? How can engineers make a codebase more
sustainable and the software engineering discipline itself more rigorous? We don’t have
fundamental answers to these questions, but we hope that Google’s collective experience
over the past two decades illuminates possible paths toward finding those answers. One key
insight we share in this book is that software engineering can be thought of as “programming
integrated over time.” What practices can we introduce to our code to make it
sustainable—able to react to necessary change—over its life cycle, from conception to
introduction to maintenance to deprecation? The book emphasizes three fundamental
principles that we feel software organizations should keep in mind when designing,
architecting, and writing their code: Time and Change How code will need to adapt over the
length of its life Scale and Growth How an organization will need to adapt as it evolves
Trade-offs and Costs How an organization makes decisions, based on the lessons of Time
and Change and Scale and Growth

entedimento : o texto diz em como a engenharia esta alem de escrever o codigo, esta em como sempre estamos agregando a quele codigos coisas novas ou resolvendo problema.
então estamos sempre atualizando o mesmo codigo.

3. Listar e explicar 3 exemplos de tradeoffs (falamos alguns nas aulas... você pode usá-los ou falar dos seus próprios)
trade-oof é o momento em que voce tem que escolher opçoes conflitantes com recursos limitados 
o momento em que voce tem apenas 100 reais e tem que escolher entre ir em um restaurante ou comprar um livro. pode ser considerado trade-off.

exemplo1: simplicidade vs complexidade 
ao desenvolver um aplicativo ou software seja para pc ou celular qualquer plataforma voce deve  escolher entre ele ter um sistema simples ou complexo, tendo um sistema de interface simples, pode ser rapido e facil de se utilizar.
mas tendo uma interface complexa voce tem mais recurso e opções avançadas que podem abrir mais possibilidade, mas alguns usuarios pode se sentir perdidos ou dificultar no uso.

exemplo2: android vs ios
a duvida da maioria dos usuarios que precisam adquirir um celular novo seria qual modelo pegar, um celular com sistema operacional android ou ios.
a maioria opita pelo ios por uma gama de lendas estabelecidas pelo mercado que vem de muito tempo atras, "android trava muito, "a tela dos modelos apple são melhores" etc...

exemplo3:  windows vc linux 
algumas pessoas que trbalham na area ficam em duvida em qual sistema operacional usar, um windows, linux ou ate mesmo macOS.

